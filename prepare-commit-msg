#!/usr/bin/env python3
import sys
import subprocess
import json
import os
import urllib.request
import urllib.error

def main():
    commit_msg_file = sys.argv[1]

    try:
        diff_output = subprocess.check_output(['git', 'diff', '--cached'], universal_newlines=True)
        prompt = "Write a great commit message for the following diff. Only output the commit message, no other text. Follow a note about git commit messages by Tim Pope. Use a blank line between paragraphs. Make sure the title line is 50 characters or less.\n\n" + diff_output
        commit_message = format_commit_message_max_72_chars(prompt_openai(prompt))

        with open(commit_msg_file, 'r') as file:
            current_message = file.read()

        with open(commit_msg_file, 'w') as file:
            file.write(commit_message + "\n" + current_message)

    except subprocess.CalledProcessError as e:
        print(f"Error running git diff: {e}")

def prompt_openai(prompt):
    api_key = os.environ.get('OPENAI_API_KEY')
    if not api_key:
        raise ValueError("OPENAI_API_KEY environment variable is not set")

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_key}'
    }

    data = {
        'model': 'gpt-4o-mini',
        'messages': [{'role': 'user', 'content': prompt}],
        'temperature': 0.7,
        'max_tokens': 500
    }

    req = urllib.request.Request('https://api.openai.com/v1/chat/completions',
                                 data=json.dumps(data).encode('utf-8'),
                                 headers=headers,
                                 method='POST')

    try:
        with urllib.request.urlopen(req) as response:
            response_data = json.loads(response.read().decode('utf-8'))
            return response_data['choices'][0]['message']['content'].strip()
    except urllib.error.HTTPError as e:
        raise Exception(f"Error {e.code}: {e.read().decode('utf-8')}")

def format_commit_message_max_72_chars(commit_message):
    lines = commit_message.split('\n')
    formatted_lines = []
    for line in lines:
        words = line.split()
        line_words = []
        for word in words:
            if len(" ".join(line_words)) + len(word) + 1 > 72:
                formatted_lines.append(" ".join(line_words))
                line_words = [word]
            else:
                line_words.append(word)
        formatted_lines.append(" ".join(line_words))
    return '\n'.join(formatted_lines)

if __name__ == "__main__":
    main()
